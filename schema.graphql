"""
A token is a representation of a fungible asset on the blockchain
as specified by the ERC20 standard.
"""
type Token @entity(immutable: true) {
  "token address"
  id: Bytes!

  "The token symbol"
  symbol: String
  "The token name"
  name: String
  "The number of decimals the token uses"
  decimals: BigInt!

  "Holder list of the token"
  balances: [TokenBalance!]! @derivedFrom(field: "token")

  "Token statistics"
  statistics: [TokenStatistic!]! @derivedFrom(field: "token")
}

"""
Token statistics. This entity is updated by the subgraph.
"""
type TokenStatistic @entity {
  "Token address"
  id: Bytes!

  "Token"
  token: Token!

  "The total supply of the token"
  totalSupply: BigInt!

  "How many holders this token has. With balance > 0"
  holderCount: BigInt!
}

"""
A contract where transfers from/to are ignored
This is used to account for contracts that are not ERC20 compliant
but allow staking one token like beefy boosts
"""
type IgnoredContract @entity(immutable: true) {
  id: Bytes!
}

"""
An holder account. Can be a user or a contract
"""
type Account @entity(immutable: true) {
  "Account address"
  id: Bytes!
  "Account balance"
  balances: [TokenBalance!]! @derivedFrom(field: "account")
}

"""
A token balance represents the amount of a specific token that an account holds
"""
type TokenBalance @entity {
  "Account address + Token address"
  id: Bytes!

  "The token that this balance is for"
  token: Token!
  "Account that holds the token"
  account: Account!
  "The amount of the token this account holds"
  amount: BigInt!
}

"""
A debug entity to track how we discover contracts and avoid double counting
"""
type Contract @entity {
  "The contract address"
  id: Bytes!

  "True if the contract was discovered via a factory"
  factory: Boolean!

  "True if the contract was enforced by a config file"
  config: Boolean!
}
